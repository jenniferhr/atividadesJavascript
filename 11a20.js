// 11) Crie uma fun√ß√£o que receba uma array e retorne o primeiro e o √∫ltimo elemento desse array como um novo array:
// Exemplos:
// receberPrimeiroEUltimoElemento([7,14,"ol√°"]) // retornar√° [7, "ol√°"]
// receberPrimeiroEUltimoElemento([-100, "aplicativo", 16]) // retornar√° [-100, 16]

function receberPrimeiroEUltimoElemento(arr) {
	listaPrimeiroEUltimo = [];
	listaPrimeiroEUltimo.unshift(arr.shift());
	listaPrimeiroEUltimo.push(arr.pop());
	return listaPrimeiroEUltimo;
}

// 12) Quando temos um objeto e manipulamos seus atributos, adicionando, atualizando ou removendo-os, estamos
// apenas modificando-o, mas, em ess√™ncia, o objeto continua o mesmo, ou seja a sua refer√™ncia de mem√≥ria √© a
// mesma.
// Num projeto que voc√™ est√° trabalhando, voc√™ foi designado a refatorar diversas fun√ß√µes para que fa√ßam c√≥pias
// de objetos e manipulem os dados dessas c√≥pias, com o intuito de evitar efeitos indesej√°veis em algumas
// situa√ß√µes devido a refer√™ncias a objetos. Abaixo, est√° a descri√ß√£o de uma dessas fun√ß√µes.
// Voc√™ escrever√° uma fun√ß√£o que recebe um objeto como primeiro par√¢metro e, como segundo par√¢metro, o nome
// de uma propriedade contida nesse objeto. Em seguida, retorne uma c√≥pia desse objeto sem a propriedade
// especificada no segundo par√¢metro.
// Exemplos:
// removerPropriedade({a: 1, b: 2}, "a") // retornar√° {b: 2}
// removerPropriedade({
//                 id: 20,
//                 nome: "caneta",
//                 descricao: "N√£o preenchido"
//             }, "descricao") // retornar√° {id: 20, nome: "caneta"}

// üí° A fim de testar se o objeto retornado n√£o √© o mesmo que foi passado como par√¢metro para a fun√ß√£o
// removerPropriedade, voc√™ poder√° usar a fun√ß√£o Object.is(), por exemplo:
// Object.is(removerPropriedade(objeto, "descricao"), objeto)
// Retornar√° false se o objeto n√£o for o mesmo.

function removerPropriedade(obj, prop) {
	delete obj[prop];
	console.log(obj);
}

// 13) Crie uma fun√ß√£o que receba um array de elementos e retorne um array somente com os n√∫meros presentes no
// array recebido como par√¢metro.
// Exemplos:
// filtrarNumeros(["Javascript", 1, "3", "Web", 20]) // retornar√° [1, 20]
// filtrarNumeros(["a", "c"]) // retornar√° []

function filtrarNumeros(arr) {
	let arrayDeNumeros = [];
	for (let i = 0; i < arr.length; i++) {
		if (typeof arr[i] === 'number') {
			arrayDeNumeros.push(arr[i]);
		}
	}
	return arrayDeNumeros;
}

// 14) Desenvolva uma fun√ß√£o que recebe como par√¢metro um objeto e retorne um array de arrays, em que cada
// elemento √© um array formado pelos pares chave/valor que corresponde a um atributo do objeto. Observe os
// exemplos abaixo para um melhor entendimento:
// Exemplos:
// objetoParaArray({
//             nome: "Maria",
//             profissao: "Desenvolvedora de software"
//             }) // ir√° retornar [["nome", "Maria"], ["profissao", "Desenvolvedora de Software"]]
// objetoParaArray({
//             codigo: 11111,
//             preco: 12000
//             }) // ir√° retornar [["codigo", 11111], ["preco", 12000]]

function objetoParaArray(obj) {
	let arraysDeObjeto = Object.entries(obj);
	return arraysDeObjeto;
}

// 15) Elabore uma fun√ß√£o que receba um array de n√∫meros e retorne um array que tenha todos os n√∫meros que s√£o
// pares e que tamb√©m tenham √≠ndices pares.
// üí° Lembre-se que um n√∫mero √© par porque √© divis√≠vel por 2, ou seja, o resto da divis√£o da divis√£o dele por
// 2 √© zero.
// Exemplos:
// receberSomenteOsParesDeIndicesPares([1, 2, 3, 4]) // retornar√° []
// receberSomenteOsParesDeIndicesPares([10, 70, 22, 43]) // retornar√° [10, 22]

function receberSomenteOsParesDeIndicesPares (arr) {
	numerosParesDeIndicesPares = [];
	for (let i = 0; i < arr.length -1; i+= 2) {
		if (arr[i] % 2 === 0) {
			numerosParesDeIndicesPares.push(arr[i]);
		}
	}
	return numerosParesDeIndicesPares;
}

// 16) A fim de manter o calend√°rio anual ajustado com o movimento de transla√ß√£o da Terra, criou-se os anos bissextos, que t√™m 366 dias em vez dos 365 presentes nos anos normais.
// Para determinar se um ano √© bissexto, √© necess√°rio saber se ele √© multiplo de 4. N√£o pode ser m√∫ltiplo de 100, exceto se for tamb√©m m√∫ltiplo de 400.
// Com isso em mente, desenvolva uma fun√ß√£o que recebe um n√∫mero correspondente a um ano e retorna se ele √©
// bissexto ou n√£o.
// Exemplos:
// checarAnoBissexto(2020) // retornar√° true
// checarAnoBissexto(2100) // retornar√° false, pois √© m√∫ltiplo de 100 e n√£o √© m√∫ltiplo de 400

function checarAnoBissexto(ano) {
	if (ano % 4 === 0 && !(ano % 100 === 0)) {
		return true;
	} else if (ano % 4 === 0 && ano % 100 === 0 && ano % 400 === 0) {
		return true;
	} else {
		return false;
	}
}

// 17) Escreva uma fun√ß√£o que receba um array de n√∫meros e retornar√° a soma de todos os n√∫meros desse array.
// Exemplos:
// somarNumeros([10, 10, 10]) // retornar√° 30
// somarNumeros([15, 15, 15, 15]) // retornar√° 60

function somarNumeros(arr) {
	let somaDosNumeros = 0;
	for (let i = 0; i < arr.length; i++) {
		let valorAtual = arr[i];
		somaDosNumeros += valorAtual;
	}
	return somaDosNumeros;
}

// 18) Voc√™ est√° trabalhando numa aplica√ß√£o pessoal de controle de despesas. Na tela principal dessa aplica√ß√£o, √© poss√≠vel adicionar produtos ou servi√ßos, informando nome, categoria e pre√ßo. Uma funcionalidade que voc√™ est√° desenvolvendo no momento √© a de somar o total das despesas.
// Crie uma fun√ß√£o que receba um array de produtos e retorne o total das despesas.
// Exemplos:
// despesasTotais([
//         {nome: "Jornal online", categoria: "Informa√ß√£o", preco: 89.99},
//         {nome: "Cinema", categoria: "Entretenimento", preco: 150}
//         ]) // retornar√° 239.99
// despesasTotais([
//         {nome: "Galaxy S20", categoria: "Eletr√¥nicos", preco: 3599.99},
//         {nome: "Macbook Pro", categoria: "Eletr√¥nicos", preco: 30999.90}
//         ]) // retornar√° 34599.89

function despesasTotais(arrDeObjetos) {
	//console.log(arrDeObjetos[1]["preco"]);
	let totalDasDespesas = 0;
	for (var i = 0; i < arrDeObjetos.length; i++) {
		valorAtualDasDespesas = arrDeObjetos[i]["preco"];
		totalDasDespesas += valorAtualDasDespesas;
	}
	return totalDasDespesas;
}

// 19) Numa aplica√ß√£o Web de investimento financeiro da qual voc√™ faz parte da equipe de desenvolvimento, pretendese adicionar a funcionalidade de calcular a m√©dia de um conjunto de n√∫meros informados pelo usu√°rio.
// Com o intuito de realizar esse c√°lculo, crie uma fun√ß√£o que receba um array com uma quantidade indeterminada
// de n√∫meros e retorne a m√©dia simples desses n√∫meros.
// üí° A m√©dia simples √© o resultado da soma de todos os n√∫meros dividido pela quantidade de n√∫meros.
// Exemplos:
// calcularMedia([0, 10]) // retornar√° 5
// calcularMedia([1, 2, 3, 4, 5]) // retornar√° 3

function calcularMedia(arr) {
	let somaDeNumeros = 0;
	for (var i = 0; i < arr.length; i++) {
		numeroAtual = arr[i];
		somaDeNumeros += numeroAtual;
	}
	return somaDeNumeros/arr.length;
}

// 20) Fa√ßa uma fun√ß√£o que recebe a base e a altura de um tri√¢ngulo e retorne a √°rea desse tri√¢ngulo. A precis√£o dever√° ser de duas casas decimais, arredondando se necess√°rio.
// üìï Obs: a f√≥rmula para calcular a √°rea de um tri√¢ngulo √© (base x altura) / 2
// Exemplos:
// areaDoTriangulo(10, 15) // retornar√° "75,00"
// areaDoTriangulo(7, 9) // retornar√° "31,50"
// areaDoTriangulo(9.25, 13.1) // retornar√° "60.59"

function areaDoTriangulo(base, altura) {
	let area = (base*altura)/2;
	return area.toFixed(2);
}